1. 예외 와 예외 클래스
예외처리를 하는 이유 : 어플리케이션(프로그램)의 정상적인 종료를 위해서

자바에서는
하드웨어 고장으로 인해 응용프로그램 실행 오류가 발생 - 에러(Error)
Error 이외에 대한 오류를 예외(Exception)이라고 한다.
예외(Exception)란 것은 잘못된  사용  또는 코딩으로 인한 오류
 - 일반 예외 (Exception)
   컴파일러가 예외 처리 코드 여부를 검사
 - 실행 예외 (Runtime Exception)
   컴파일러가 예외 처리 코드 여부를 검사하지 않는 예외

 자바의 예외처리 설명
 자바는 예외가 발생하면 예외 클래스로부터 객체를 생성한다.
 이 객체는 예외 처리 시 사용되고, 자바의 모든 에러와 예외 클래스는 Throwable을 상속받아 만들어지고
 ,추가적으로 예외 클래스는 java.lang.Exception 클래스를 상속받는다. 실행예외는 RuntimeException 과
 그 자식클래스에 해당한다.
 java.lang 패키지를 표준 라이브러리 라고 한다.  import를 하지 않아도 사용가능한 라이브러리


2. 예외 처리 코드
예외가 발생했을때 프로그램의 갑작스러운 종료(비정상적 종료)를 막고,
정상 실행을 유지할수 있도록 처리하는 코드를 예외 처리 코드라 한다.
try - catch
try - catch - finally

생성자 내부 나 메소드 내부에서 작성된다.



4.리소스는 자동 닫기
리소스 ->데이터를 제공하는 객체
리소스는 사용하기 위해 열어야하고 사용이 끝난 다음에는 닫아야 한다.


5.예외 발생 시키기
방법1: 메소드 내부에서 예외가 발생할 떄 tyy-catch 블럭으로 예외를 처리한다
방법2: 메소드를 호출한 곳으로 예외를 떠넘길 수도 있다.

public void medthod1(){
     try{
        method2();
     } catch (ClassNotFoundException e) {

     }
}

public void method2() throws ClassNotFoundException{
     Class.forName("java.lang.String2");
}

사용자 정의 예외
컴파일러가 체크하는 일반 예외로 선언할 수 도 있고, 컴파일러가 체크하지 못하는 실행 예외도 정의하여 사용할 수 있다.
일반예외인 경우는 Exception 클래스의 자식클래스로 선언하고
실행예외인 경우는 RuntimeException 의 자식 클래스로 선언한다.

public class XXXException  extedns Exception | RuntimException {

   public XXXException() {}
   public XXXException(String message) {
      super(message);
   }
}





